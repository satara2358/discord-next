desde || https://ui.shadcn.com/docs/installation/next
-> npx create-next-app@latest discord-next --typescript --tailwind --esl
int
-> npx shadcn-ui@latest init
  - typescript
  - STYLE || default
  - base color || Stone
  - yes

-> npm run dev
-> npx shadcn-ui@latest add button
-> npm install @clerk/nextjs
-> npm i next-themes || desde || https://ui.shadcn.com/docs/dark-mode/next
  seguir la documentacion
-> npm i -D prisma
-> npx prisma init
-> npm install prisma typescript ts-node @types/node --save-dev
-> npm install mongodb
-> npm install @prisma/client
-> npx tsc --init
-> npx prisma generate
-> npx prisma db pull
-> npx prisma studio || para ver los datos
-> npx shadcn-ui@latest add dialog
-> npx shadcn-ui@latest add input
-> npx shadcn-ui@latest add form
-> 

--------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// model data_base_discord {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

model Profile {
  id String @id @default(uuid()) @map("_id") @db.ObjectId
  userId String @unique 
  name String
  imageUrl String @db.String
  email String @db.String

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Server {
  id String @id @default(uuid()) @map("_id") @db.ObjectId
  name String
  imageUrl String @db.String
  inviteCode String @db.String

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid()) @map("_id")
  role MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid()) @map("_id")
  name String
  type ChannelType @default(TEXT)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([profileId])
  @@index([serverId])
}

--------------------------------------------
-> desde || https://uploadthing.com/dashboard/abcf8kkzbn/api-keys || usar API KEYS
-> npm install uploadthing @uploadthing/react
-> npx prisma studio
-> npm i axios
-> npm i uuid
-> npm i -D @types/uuid
-> desde https://ui.shadcn.com/docs/components/tooltip || 
  npx shadcn@latest add tooltip
  npx shadcn@latest add separator
  npx shadcn@latest add scroll-area
